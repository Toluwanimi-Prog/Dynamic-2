{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Derrick Baruga\n",
        "\n",
        "This page contains all of Derrick Baruga's submissions this semester organized into different sections.\n",
        "\n",
        "## Wednesday\n",
        "\n",
        "### Week 1\n",
        "\n",
        "### Week 2\n",
        "\n",
        "I am using the air-quality dataset, which contains air quality measurements collected over several months, specifically from May to September. The dataset includes the following variables: **Ozone**, **Solar.R** (solar radiation), **Wind** (wind speed in miles per hour), **Temp** (temperature in degrees Fahrenheit), **Month** (ranging from 5 for May to 9 for September), and **Day** (ranging from 1 to 31).\n",
        "\n",
        "**Cleaning The Data**\n",
        "\n",
        "I used Excel to clean the data by removing all rows with NA values and performed an exploratory analysis to identify patterns, trends, and potential relationships between these variables over the specified months and days.\n",
        "\n",
        "**Ozone Histogram**\n",
        "\n",
        "![](hist_ozone_baruga.png)\n",
        "\n",
        "The Ozone histogram has its highest values on the left and then curbs off to the right, it indicates a right-skewed distribution.\n",
        "\n",
        "This means:\n",
        "\n",
        "-   Most ozone values are low, with a few much higher values creating a long tail on the right.\n",
        "-   The skewness could result from natural variability, pollution events, or weather conditions affecting ozone levels.\n",
        "\n",
        "**Scatter Plot Ozone vs Temperature**\n",
        "\n",
        "![](scatter_ozone_vs_temp_baruga.png)\n",
        "\n",
        "-   A scatter plot of ozone (x-axis) vs. temperature (y-axis) with a slight positive correlation means that higher ozone levels tend to be associated with higher temperatures. However, the relationship is weak, suggesting other factors (like wind, humidity, or pollution) also affect ozone levels and temperature.\n",
        "\n",
        "**Pivot Table Average Ozones Per Day & Month (Redacted)**\n",
        "\n",
        "![](pivot4_table_baruga.png)\n",
        "\n",
        "-   The pivot table presents daily sums for multiple variables (Temperature, Wind, Solar Radiation, and Ozone) over several months (May to September). The days with the highest ozone averages are Day 25 in May (with an Ozone value of 5-65) and July (with an Ozone value of 7-74), with other notable days being Day 29 and Day 30 in May. The months with the highest ozone levels are May, which shows several days with high averages, and July, particularly on Days 25 and 29.\n",
        "\n",
        "**Pivot Chart Average Ozones Per Day & Month**\n",
        "\n",
        "![](pivot4_chart_baruga.png)\n",
        "\n",
        "**Pivot Table of Variation in Solar Radiation and Temperature**\n",
        "\n",
        "-   The pivot chart provide a visual representation of how these variables change over time. The histogram shows day-to-day variations in ozone levels, with the highest concentrations occurring in the summer months. Notably, there is a pronounced peak around July 25th, indicating exceptionally high ozone levels on that day. May and July both have elevated levels, with smaller peaks around May 29th and 30th, but July 25th stands out as the most significant. Overall, the chart confirms that ozone levels are highest in July, particularly around the 25th.\n",
        "\n",
        "![](pivot1_table_baruga.png)\n",
        "\n",
        "-   The pivot table shows daily sums for Solar Radiation and Temperature over a month. There is noticeable daily variation, with high values on days like 18, 19, and 29, indicating intense sunlight and warmer temperatures, and lower values on days like 23 and 27, reflecting cooler conditions. The grand totals summarize the entire month, with 20,513 for Solar Radiation and 8,635 for Temperature. Overall, the table captures daily fluctuations in weather conditions.\n",
        "\n",
        "\\*\\* Pivot Chart of Pivot Chart of Variation in Solar Radiation and Temperature\\*\\*\n",
        "\n",
        "![](pivot1_chart_baruga.png)\n",
        "\n",
        "-   The bar chart shows daily sums of Solar Radiation (blue) and Temperature (orange) over 31 days. High Solar Radiation is notable on days like 9, 13, 16, 18, 19, and 29, with values exceeding 1,000. Temperature values are generally lower, mostly below 400, with higher values on days like 9 and 18. There are significant day-to-day variations, with some days showing high Solar Radiation but lower temperatures (e.g., Day 13). The chart captures daily fluctuations and highlights days with extreme values.\n",
        "\n",
        "**Pivot Table**\n",
        "\n",
        "![](pivot2_table_baruga.png)\n",
        "\n",
        "-   The pivot table displays the average temperature (`Average of Temp`) and ozone levels (`Average of Ozone`) for days labeled 5 to 9, showing average temperatures ranging from 66.46 to 83.88, with the highest temperatures recorded on days 7 and 8. Ozone levels vary significantly, from a low of 24.13 on Day 5 to a high of 60.00 on Day 8. Overall, the average temperature for the period is 77.79, and the average ozone level is 42.10, reflecting moderate temperatures with variable ozone levels across these days and highlighting daily fluctuations in both metrics.\n",
        "\n",
        "**Pivot Chart**\n",
        "\n",
        "![](pivot2_chart_baruga.png)\n",
        "\n",
        "-   The bar chart illustrates the average temperature (in blue) and average ozone levels (in orange) for days 5 to 9, showing that temperatures remain relatively high throughout, ranging from around 66 on Day 5 to approximately 84 on Days 7 and 8. Ozone levels start low on Day 5 (around 24), rise significantly by Days 7 and 8 (around 59-60), and then decrease slightly on Day 9 (around 31). The chart suggests a potential correlation between higher temperatures and elevated ozone levels, as Days 7 and 8, which have the highest temperatures, also show the highest average ozone levels, indicating noticeable variability over the period.\n",
        "\n",
        "### Week 3\n",
        "\n",
        "[Wednesday Dashboard](https://public.tableau.com/views/Book1_17262574551960/Dashboard1?:language=en-US&publish=yes&:sid=&:redirect=auth&:display_count=n&:origin=viz_share_link)\n",
        "\n",
        "1.  **Histogram of Avg REM Sleep**:\n",
        "\n",
        "-   This bar chart shows the average REM sleep time categorized by both conservation status (like \"cd,\" \"en,\" \"lc\") and dietary habits (carnivore, herbivore, omnivore, etc.).\n",
        "\n",
        "-   The distribution indicates variations in REM sleep depending on these factors. For example, certain categories, such as carnivores with an \"lc\" (least concern) conservation status, seem to have higher average REM sleep.\n",
        "\n",
        "2.  **Stacked Bar Chart of Vore vs. REM Sleep**:\n",
        "\n",
        "-   This chart displays the breakdown of average REM sleep across different dietary categories and their conservation statuses, further subdivided by animal order.\n",
        "\n",
        "-   It provides detailed insights into how sleep patterns differ based on dietary habits and animal groups. For instance, \"Carnivora\" under different conservation statuses like \"lc\" and \"domesticated\" shows varying REM sleep levels.\n",
        "\n",
        "3.  **Packed Bubble Chart of Order**:\n",
        "\n",
        "-   The chart uses bubbles to represent different orders of animals, with the size of each bubble possibly corresponding to the number of species or the average REM sleep within that order.\n",
        "\n",
        "-   Colors differentiate various dietary habits (\"vore\"), showing how different animal orders fall into categories such as carnivores, herbivores, omnivores, etc.\n",
        "\n",
        "4.  **Treemap of Order**:\n",
        "\n",
        "-   This chart breaks down the animal orders into smaller rectangles, where the size of each rectangle may indicate the average REM sleep, the number of species, or another quantitative measure.\n",
        "\n",
        "-   The colors correspond to different orders, offering a visual overview of how these orders compare in the measured metric.\n",
        "\n",
        "## Friday - Midterm Projects\n",
        "\n",
        "### Week 1\n",
        "\n",
        "### Week 2\n",
        "\n",
        "title: \"Midterm_Project_Baruga\" subtitle: \"Data.gov: Warehouse and Retail Sales\" format: html ---\n",
        "\n",
        "**Context of the Dataset**\n",
        "\n",
        "-   **Title**: Warehouse and Retail Sales\n",
        "-   **Link**: [Download the CSV dataset](https://data.montgomerycountymd.gov/api/views/v76h-r7br/rows.csv?accessType=DOWNLOAD)\n",
        "\n",
        "The *Warehouse and Retail Sales* dataset provides a comprehensive view of sales activities in Montgomery County, Maryland, by capturing data from various warehouse and retail operations. This dataset was collected through a combination of direct reporting from businesses, automated sales tracking systems, and regional sales surveys. The data encompasses a range of sales metrics, including volume and product categories, to offer insights into business performance across different types of establishments.\n",
        "\n",
        "The dataset includes the following variables:\n",
        "\n",
        "-   Row Labels: Categories or identifiers used to organize and classify the sales data.\n",
        "-   BEER: Sales volume for beer products.\n",
        "-   DUNNAGE: Sales volume for dunnage products, which are materials used to protect goods during transportation.\n",
        "-   KEGS: Sales volume for kegs, typically used for storing and transporting beverages.\n",
        "-   LIQUOR: Sales volume for liquor products.\n",
        "-   NON-ALCOHOL: Sales volume for non-alcoholic beverages.\n",
        "-   REF: Sales volume for refrigeration supplies or products.\n",
        "-   STR_SUPPLIES: Sales volume for store supplies, which may include various retail essentials.\n",
        "-   WINE: Sales volume for wine products.\n",
        "-   Grand Total: The total sales volume across all categories combined.\n",
        "\n",
        "\\*\\* Data Cleaning and Preparation\\*\\*\n",
        "\n",
        "1.  **Import the Data**: I downloaded and loaded the CSV file into Excel.\n",
        "2.  **Check for Missing Values**: My preferred method for handling NAs is by highlighting them and deselecting them using the filter tool for each column as I feel most thorough by doing that. Using the following steps \"Select the entire dataset, go to Home \\> Conditional Formatting \\> Highlight Cells Rules \\> Blanks to highlight all blank cells.\"\n",
        "3.  **Data Formatting**: Formated any columns that need specific data types (such as dates as date format, numbers as currency or percentage).\n",
        "\n",
        "-   Specifically I used the =TEXTJOIN(\"-\", TRUE, A2, B2) function to join column one (YYYY) and column two (MM) into a new column called TIME\n",
        "\n",
        "![](summary_screenshot.png)\n",
        "\n",
        "**Visualization**\n",
        "\n",
        "**Pivot Tables YT link:** https://www.youtube.com/watch?v=qu-AK0Hv0b4\n",
        "\n",
        "-   Pivot tables are a powerful and user friendly (drag and drop) summary statistic/visualisation tool that I used to get an intial feel of my data.\n",
        "\n",
        "Here are the findings:\n",
        "\n",
        "**Warehouse Sales/Expenses of Beverages Over Time (2017 - 2020)**\n",
        "\n",
        "![](pivot_table_baruga.png)\n",
        "\n",
        "-   **Overall Sales**: ***BEER*** has the highest sales, followed by ***WINE***, while ***DUNNAGE***, ***REF***, and ***STR_SUPPLIES*** have negative or minimal sales, which makes sense as refers to materials used to protect goods during shipping and handling, such as packing materials or cushioning, and as such is an expense to the business leading to its negative output on revenue.\n",
        "-   **Monthly Trends**: ***BEER*** sales vary significantly, with large peaks and drops. ***WINE*** sales are more stable but still show some fluctuation. ***KEGS*** and ***LIQUOR*** show positive but lower sales.\n",
        "\n",
        "**Histogram of Warehouse Sales/Expenses of Beverages Over Time**\n",
        "\n",
        "![](pivot_chart.png)\n",
        "\n",
        "-   Here is a histogram representation of the aforementioned summary pivot tables. There appears to be a disporportionate amount of ***BEER*** bought for warehouses. But that could be due to the fact that beers are sold in packs and so single unit quantity has skyrocketed in order to make a \"12 pack\" that will later count as one unit sold at retail.\n",
        "\n",
        "**Retail Sales of Beverages Over Time (2017 - 2020)**\n",
        "\n",
        "![](pivot2_table.png)\n",
        "\n",
        "-   **Product Types**: Includes Beer, Liquor, Wine, Non-Alcoholic beverages, and others, with substantial sales figures for Beer, Liquor, and Wine.\n",
        "-   **Sales Trends**: Liquor leads with \\$802,691.43 in total sales, followed by Wine (\\$746,498.59) and Beer (\\$574,220.53). Recent months show higher sales for Beer and Wine.\n",
        "-   **Low Sales Categories**: Items like Dunnage and Kegs have negligible or zero sales.\n",
        "-   **Overall Total**: Total sales across all products amount to \\$2,160,899.37, highlighting overall retail activity.\n",
        "\n",
        "**Histogram of Retail Sales of Beverages Over Time**\n",
        "\n",
        "![](pivot_chart_2.png)\n",
        "\n",
        "-   Once we come to the retail side of things we see that ***WINE*** and ***LIQUOR*** are clear best sellers. It is shown hower that ***LIQUOR*** has begun to overtake ***WINE*** in retail sales.\n",
        "\n",
        "**Summary**\n",
        "\n",
        "From the \"Warehouse and Retail Sales\" dataset, I found that Beer leads in warehouse sales, with notable fluctuations due to bulk packaging, while Wine and Liquor have more stable sales. Retail sales show Liquor as the top seller, recently surpassing Wine, with Beer also performing strongly but declining. The histograms illustrate high Beer volume in warehouses and a shift in retail dominance from Wine to Liquor. Next, I will analyze seasonal trends, create advanced visualizations for deeper insights, and finalize the report with comprehensive findings and recommendations. \\### Week 2 \\### Week 3\n",
        "\n",
        "### Week 3\n",
        "\n",
        "[Wednesday Dashboard](https://public.tableau.com/views/Book1_17262574551960/Dashboard2?:language=en-US&publish=yes&:sid=&:redirect=auth&:display_count=n&:origin=viz_share_link)\n",
        "\n",
        "**1.Histogram of Avg Sales Over Time:**\n",
        "\n",
        "-   This stacked bar chart displays the average retail sales from June 2017 to September 2020, broken down by different item types such as \"BEER,\" \"WINE,\" \"LIQUOR,\" \"NON-ALCOHOL,\" and others.\n",
        "\n",
        "-   The chart shows monthly fluctuations in sales, with noticeable peaks around December 2017 and July 2020. This suggests seasonal effects or particular periods of high demand for certain items.\n",
        "\n",
        "-   The different colors represent various item types, indicating the contribution of each category to the total sales in each month. For example, \"LIQUOR\" and \"NON-ALCOHOL\" seem to contribute significantly to the total sales during peak months.\n",
        "\n",
        "**2. Area Chart: Avg Sales vs. Transfers:**\n",
        "\n",
        "-   This plot consists of two layered area charts: the top one shows average retail transfers, and the bottom one shows average retail sales over the same period (June 2017 to September 2020).\n",
        "\n",
        "-   Both charts use colors to represent different item types, revealing how each type contributes to overall sales and transfers.\n",
        "\n",
        "-   The charts indicate that the trends in transfers often align with the sales trends, which suggests a correlation between the quantity of goods transferred and the sales performance.\n",
        "\n",
        "-   Peaks and troughs in the charts could indicate seasonal variations, inventory management strategies, or market demand shifts for various items.\n",
        "\n",
        "**3. Packed Bubble Chart of Avg Sales Over Time:**\n",
        "\n",
        "-   This chart visualizes average sales using bubbles, where the size of each bubble reflects the volume of sales, and the color represents different item types.\n",
        "\n",
        "-   Larger bubbles correspond to higher sales, indicating which item types have the greatest impact on sales over time.\n",
        "\n",
        "-   The variety of bubble sizes and colors reveals the diversity in item types and their varying sales performance.\n",
        "\n",
        "**4. Treemap of Retail Transfers vs. Retail Sales:**\n",
        "\n",
        "-   The treemap displays retail sales data, with each rectangle representing different categories (\"NON-ALCOHOL,\" \"BEER,\" \"LIQUOR,\" \"REF,\" etc.) and specific years (2017, 2019, 2020).\n",
        "\n",
        "-   The size of each rectangle corresponds to the magnitude of sales, and the color shading indicates the average retail sales, with darker shades representing higher sales.\n",
        "\n",
        "-   This visualization shows how different item types and their sales vary in significance. For example, \"NON-ALCOHOL\" items appear to have a prominent share, especially in 2020.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Jupyter Notebooks\n",
        "\n",
        "### Week 4\n",
        "\n",
        "\n",
        "**Markdown title**\n",
        "\n",
        "Markdown Lists:\n",
        "\n",
        "- Item 1\n",
        "- Item 2\n",
        "- Item 3\n",
        "\n",
        "Enumarated list\n",
        "\n",
        "1. Hola\n",
        "2. Hi\n",
        "3. Namaste\n",
        "\n",
        "We can do **bold**, or *italic*\n",
        "\n",
        "\n",
        "```python\n",
        "# Importing Numpy with nickname np\n",
        "import numpy as np\n",
        "np.absolute(-1)\n",
        "arr = np.array([1, 2, 3, 4, 5])\n",
        "print(arr)\n",
        "```\n",
        "\n",
        "    [1 2 3 4 5]\n",
        "    \n",
        "\n",
        "\n",
        "```python\n",
        "# Lists are native to python\n",
        "my_list = [1, 2, 3, 4, 5]\n",
        "print(my_list)\n",
        "```\n",
        "\n",
        "    [1, 2, 3, 4, 5]\n",
        "    \n",
        "\n",
        "\n",
        "```python\n",
        "# Dataframes, so we need pandas library\n",
        "import pandas as pd\n",
        "data = {'Ozone': [41, 36, 12], 'Temp': [67, 72, 74]}\n",
        "df = pd.DataFrame(data)\n",
        "print(df)\n",
        "```\n",
        "\n",
        "       Ozone  Temp\n",
        "    0     41    67\n",
        "    1     36    72\n",
        "    2     12    74\n",
        "    \n",
        "\n",
        "**4. Loading csv files**\n",
        "\n",
        "To load .csv files into a 'DataFrame', we use pandas function read_csv\n",
        "\n",
        "\n",
        "```python\n",
        "df = pd.read_csv('/Users/derrickmarkbavaudbaruga/Documents/fall 2024/CSC 477/Week 2/airquality_datasets.csv')\n",
        "# Summary of the dataset\n",
        "print(df.info())\n",
        "print(df.describe())\n",
        "```\n",
        "\n",
        "    <class 'pandas.core.frame.DataFrame'>\n",
        "    RangeIndex: 153 entries, 0 to 152\n",
        "    Data columns (total 6 columns):\n",
        "     #   Column   Non-Null Count  Dtype  \n",
        "    ---  ------   --------------  -----  \n",
        "     0   Ozone    116 non-null    float64\n",
        "     1   Solar.R  146 non-null    float64\n",
        "     2   Wind     153 non-null    float64\n",
        "     3   Temp     153 non-null    int64  \n",
        "     4   Month    153 non-null    int64  \n",
        "     5   Day      153 non-null    int64  \n",
        "    dtypes: float64(3), int64(3)\n",
        "    memory usage: 7.3 KB\n",
        "    None\n",
        "                Ozone     Solar.R        Wind        Temp       Month         Day\n",
        "    count  116.000000  146.000000  153.000000  153.000000  153.000000  153.000000\n",
        "    mean    42.129310  185.931507    9.957516   77.882353    6.993464   15.803922\n",
        "    std     32.987885   90.058422    3.523001    9.465270    1.416522    8.864520\n",
        "    min      1.000000    7.000000    1.700000   56.000000    5.000000    1.000000\n",
        "    25%     18.000000  115.750000    7.400000   72.000000    6.000000    8.000000\n",
        "    50%     31.500000  205.000000    9.700000   79.000000    7.000000   16.000000\n",
        "    75%     63.250000  258.750000   11.500000   85.000000    8.000000   23.000000\n",
        "    max    168.000000  334.000000   20.700000   97.000000    9.000000   31.000000\n",
        "    \n",
        "\n",
        "\n",
        "```python\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Ozone Histogram\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.hist(df['Ozone'].dropna(), bins=20, color='blue', edgecolor='black')\n",
        "plt.title('Distribution of Ozone Levels')\n",
        "plt.xlabel('Ozone (ppb)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "    \n",
        "![png](week4_baruga_python_files/week4_baruga_python_6_0.png)\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "# Temp Histogram\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.hist(df['Temp'].dropna(), bins=20, color='orange', edgecolor='black')\n",
        "plt.title('Distribution of Temperature')\n",
        "plt.xlabel('Temperature (°F)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "    \n",
        "![png](week4_baruga_python_files/week4_baruga_python_7_0.png)\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "# Boxplot for Ozone\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.boxplot(df['Ozone'].dropna())\n",
        "plt.title('Boxplot of Ozone Levels')\n",
        "plt.ylabel('Ozone (ppb)')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "    \n",
        "![png](week4_baruga_python_files/week4_baruga_python_8_0.png)\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "# Boxplot for Temp\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.boxplot(df['Temp'].dropna())\n",
        "plt.title('Boxplot of Temperature')\n",
        "plt.ylabel('Temperature (°F)')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "    \n",
        "![png](week4_baruga_python_files/week4_baruga_python_9_0.png)\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### Week 5 \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### 1. Introduction to Plotnine\n",
        "\n",
        "plotnine is a data visualization package for Python based on the Grammar of Graphics, which is a system for understanding and building plots. The grammar describes how plots are constructed by combining data, aesthetic mappings, geometric objects, and other components.\n",
        "\n",
        "To begin, you’ll need to install the plotnine package if you don’t have it installed:\n"
      ],
      "id": "b664a874"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# !pip install plotnine"
      ],
      "id": "4e347c84",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 2. The Grammar of Graphics\n",
        "\n",
        "The Grammar of Graphics consists of the following key components:\n",
        "\n",
        "- Data: The data you want to visualize.\n",
        "- Aesthetics (aes): How the data is mapped to visual properties, such as x and y coordinates, color, size, etc.\n",
        "- Geometries (geom): The type of plot, like points, lines, bars, etc.\n",
        "- Facets: Subplots based on the data.\n",
        "- Scales: Control the mapping from data to aesthetic properties.\n",
        "- Coordinate systems: Adjust how data is projected on the plane (Cartesian, rotations, polar, etc.).\n",
        "- Themes: Adjust the non-data elements like background, labels, gridlines, etc.\n",
        "\n",
        "### 3. Creating Your First Plot\n",
        "Let’s begin by creating a simple scatter plot using the famous mtcars dataset. We’ll show how to set up the basic structure and gradually build complexity.\n"
      ],
      "id": "9e0f64cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Import required libraries\n",
        "import pandas as pd\n",
        "from plotnine import ggplot, aes, geom_point, labs\n",
        "\n",
        "# Load the mtcars dataset\n",
        "mtcars = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/mtcars.csv')\n",
        "\n",
        "# Create a basic scatter plot\n",
        "(ggplot(mtcars, aes(x='wt', y='mpg')) +\n",
        " geom_point() +\n",
        " labs(title='Scatter Plot of MPG vs Weight',\n",
        "      x='Weight (1000 lbs)',\n",
        "      y='Miles per Gallon'))"
      ],
      "id": "c9807206",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 4. Adding Aesthetic Mappings\n",
        "\n",
        "In the Grammar of Graphics, aesthetics control how data points are represented visually. You can map variables to size, color, shape, and more.\n",
        "\n",
        "Example: Color by cyl (number of cylinders)\n"
      ],
      "id": "c3c60928"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "(ggplot(mtcars, aes(x='wt', y='mpg', color='factor(cyl)')) +\n",
        " geom_point() +\n",
        " labs(title='MPG vs Weight by Cylinder',\n",
        "      x='Weight (1000 lbs)',\n",
        "      y='Miles per Gallon',\n",
        "      color='Cylinders'))"
      ],
      "id": "5388fb68",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Example: Size by horsepower (hp)\n"
      ],
      "id": "94ad61b2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "(ggplot(mtcars, aes(x='wt', y='mpg', color='factor(cyl)', size='hp')) +\n",
        " geom_point() +\n",
        " labs(title='MPG vs Weight by Cylinder and Horsepower',\n",
        "      x='Weight (1000 lbs)',\n",
        "      y='Miles per Gallon',\n",
        "      color='Cylinders',\n",
        "      size='Horsepower'))"
      ],
      "id": "2a840aaa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 5. Geometric Objects\n",
        "\n",
        "geom_* specifies the type of plot. You can create scatter plots, line charts, bar plots, histograms, etc.\n",
        "\n",
        "Example: Adding a smooth line (geom_smooth)\n"
      ],
      "id": "33ef7dcd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from plotnine import geom_smooth\n",
        "\n",
        "(ggplot(mtcars, aes(x='wt', y='mpg')) +\n",
        " geom_point() +\n",
        " geom_smooth(method='lm') +  # Linear regression line\n",
        " labs(title='MPG vs Weight with Regression Line',\n",
        "      x='Weight (1000 lbs)',\n",
        "      y='Miles per Gallon'))"
      ],
      "id": "713e6a93",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 6. Faceting\n",
        "\n",
        "Faceting allows you to split your plot into multiple panels based on a factor.\n",
        "\n",
        "Example: Facet by cyl\n"
      ],
      "id": "c16573e5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from plotnine import facet_wrap\n",
        "\n",
        "(ggplot(mtcars, aes(x='wt', y='mpg')) +\n",
        " geom_point() +\n",
        " facet_wrap('~cyl') +  # Split into subplots by cylinders\n",
        " labs(title='MPG vs Weight Faceted by Cylinder',\n",
        "      x='Weight (1000 lbs)',\n",
        "      y='Miles per Gallon'))"
      ],
      "id": "0e671e54",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 7. Customizing Scales\n",
        "\n",
        "Scales control the mapping from data to aesthetic attributes. You can customize scales for color, size, and more.\n",
        "\n",
        "Example: Custom Color Scale\n"
      ],
      "id": "f3f32880"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from plotnine import scale_color_manual\n",
        "\n",
        "(ggplot(mtcars, aes(x='wt', y='mpg', color='factor(cyl)')) +\n",
        " geom_point() +\n",
        " scale_color_manual(values=['#1f77b4', '#ff7f0e', '#2ca02c']) +  # Custom colors\n",
        " labs(title='MPG vs Weight with Custom Colors',\n",
        "      x='Weight (1000 lbs)',\n",
        "      y='Miles per Gallon',\n",
        "      color='Cylinders'))"
      ],
      "id": "aa4de941",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 8. Flip Coordinates\n",
        "Create a bar plot showing distribution of cylinders\n",
        "\n",
        "Example: Fliping coordinates axis\n"
      ],
      "id": "7c5ddab8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "from plotnine import ggplot, aes, geom_bar, coord_flip, labs\n",
        "\n",
        "# Load the mtcars dataset\n",
        "mtcars = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/mtcars.csv')\n",
        "\n",
        "# Create a bar plot showing distribution of cylinders\n",
        "(ggplot(mtcars, aes(x='factor(cyl)', fill='factor(cyl)')) +\n",
        " geom_bar(width=1) +\n",
        " coord_flip() +  # Flip coordinates as a simple workaround\n",
        " labs(title='Distribution of Cylinders',\n",
        "      x='Cylinders',\n",
        "      fill='Cylinders'))"
      ],
      "id": "cfb888e2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 9. Themes\n",
        "\n",
        "Themes allow you to adjust the non-data aspects of the plot, such as background, axis labels, and gridlines.\n",
        "\n",
        "Example: Apply a Minimal Theme\n"
      ],
      "id": "819d084c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from plotnine import theme_minimal\n",
        "\n",
        "(ggplot(mtcars, aes(x='wt', y='mpg')) +\n",
        " geom_point() +\n",
        " theme_minimal() +  # Minimalistic theme\n",
        " labs(title='MPG vs Weight with Minimal Theme',\n",
        "      x='Weight (1000 lbs)',\n",
        "      y='Miles per Gallon'))"
      ],
      "id": "00ec822e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 10. Saving the Plot\n",
        "\n",
        "You can save your plot using the save method.\n",
        "\n",
        "Example: Save the plot\n"
      ],
      "id": "6c588848"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Save the plot to a file\n",
        "p = (ggplot(mtcars, aes(x='wt', y='mpg')) +\n",
        "     geom_point() +\n",
        "     labs(title='MPG vs Weight',\n",
        "          x='Weight (1000 lbs)',\n",
        "          y='Miles per Gallon'))\n",
        "\n",
        "p.save(\"mpg_vs_weight.png\")"
      ],
      "id": "ac0fde5c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Midterm Report**\n",
        "\n",
        "\n",
        "**Data Analysis**\n",
        "\n",
        "### Load libraries\n",
        "\n",
        "\n",
        "```python\n",
        "import torch as tch\n",
        "import pandas as pd\n",
        "import scipy as sci\n",
        "import openpyxl as opxl\n",
        "import seaborn as sns\n",
        "```\n",
        "\n",
        "### Load CSV\n",
        "\n",
        "\n",
        "```python\n",
        "df = pd.read_csv('data.csv', low_memory=False)\n",
        "```\n",
        "\n",
        "### Summary Stats\n",
        "\n",
        "\n",
        "```python\n",
        "df.head()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>SCRMCTRL</th>\n",
        "      <th>PPCSWGT</th>\n",
        "      <th>SEQNUM</th>\n",
        "      <th>SEX</th>\n",
        "      <th>AGE</th>\n",
        "      <th>INTTYPE</th>\n",
        "      <th>NONINT</th>\n",
        "      <th>HISP</th>\n",
        "      <th>MODE</th>\n",
        "      <th>PSSTRATA</th>\n",
        "      <th>...</th>\n",
        "      <th>V352A</th>\n",
        "      <th>V352B</th>\n",
        "      <th>V352C</th>\n",
        "      <th>V352D</th>\n",
        "      <th>V352E</th>\n",
        "      <th>V352F</th>\n",
        "      <th>CHECK_ITEM_J</th>\n",
        "      <th>CHECK_ITEM_K</th>\n",
        "      <th>CHECK_ITEM_L</th>\n",
        "      <th>V353</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2.030020e+18</td>\n",
        "      <td>4150.904836</td>\n",
        "      <td>1.0</td>\n",
        "      <td>(1) Male</td>\n",
        "      <td>(4) 45-64</td>\n",
        "      <td>(2) PPCS Interview - Telephone</td>\n",
        "      <td>NaN</td>\n",
        "      <td>(1) White Only</td>\n",
        "      <td>(0) Computer-assisted personal interviewing</td>\n",
        "      <td>54</td>\n",
        "      <td>...</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2.030030e+18</td>\n",
        "      <td>1601.829088</td>\n",
        "      <td>2.0</td>\n",
        "      <td>(2) Female</td>\n",
        "      <td>(3) 25-44</td>\n",
        "      <td>(2) PPCS Interview - Telephone</td>\n",
        "      <td>NaN</td>\n",
        "      <td>(1) White Only</td>\n",
        "      <td>(0) Computer-assisted personal interviewing</td>\n",
        "      <td>8</td>\n",
        "      <td>...</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2.030030e+18</td>\n",
        "      <td>0.000000</td>\n",
        "      <td>3.0</td>\n",
        "      <td>(1) Male</td>\n",
        "      <td>(1) 16-17</td>\n",
        "      <td>(5) PPCS Noninterview</td>\n",
        "      <td>(5) NCVS Interview Completed by Proxy</td>\n",
        "      <td>(2) Black Only</td>\n",
        "      <td>(0) Computer-assisted personal interviewing</td>\n",
        "      <td>8</td>\n",
        "      <td>...</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2.030030e+18</td>\n",
        "      <td>0.000000</td>\n",
        "      <td>4.0</td>\n",
        "      <td>(1) Male</td>\n",
        "      <td>(3) 25-44</td>\n",
        "      <td>(5) PPCS Noninterview</td>\n",
        "      <td>(5) NCVS Interview Completed by Proxy</td>\n",
        "      <td>(1) White Only</td>\n",
        "      <td>(0) Computer-assisted personal interviewing</td>\n",
        "      <td>8</td>\n",
        "      <td>...</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2.030030e+18</td>\n",
        "      <td>1672.290183</td>\n",
        "      <td>5.0</td>\n",
        "      <td>(1) Male</td>\n",
        "      <td>(3) 25-44</td>\n",
        "      <td>(2) PPCS Interview - Telephone</td>\n",
        "      <td>NaN</td>\n",
        "      <td>(2) Black Only</td>\n",
        "      <td>(0) Computer-assisted personal interviewing</td>\n",
        "      <td>37</td>\n",
        "      <td>...</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows × 266 columns</p>\n",
        "</div>\n",
        "\n",
        "\n",
        "\n",
        "### Mapping Race (HISP) and CHECK_ITEM_L\n",
        "\n",
        "CHECK_ITEM_L is the survey question asked to participants on whether or not they have been arrested before\n",
        "\n",
        "\n",
        "```python\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "df = pd.read_csv('data.csv', low_memory=False)\n",
        "\n",
        "# Mapping CHECK_ITEM_L\n",
        "CHECK_ITEM_L_mapping = {\n",
        "    '(1) Yes': 1,\n",
        "    '(2) 2': 2,\n",
        "    '(9) Out of universe': 9\n",
        "}\n",
        "\n",
        "df['CHECK_ITEM_L'] = df['CHECK_ITEM_L'].astype(str).map(CHECK_ITEM_L_mapping)\n",
        "df['CHECK_ITEM_L'] = pd.to_numeric(df['CHECK_ITEM_L'], errors='coerce')\n",
        "\n",
        "# Mapping HISP\n",
        "race_mapping = {\n",
        "    '(1) White Only': 1,\n",
        "    '(2) Black Only': 2,\n",
        "    '(3) Hispanic': 3,\n",
        "    '(4) Asian Only': 4,\n",
        "    '(5) Other': 5\n",
        "}\n",
        "\n",
        "df['HISP'] = df['HISP'].astype(str).map(race_mapping)\n",
        "df['HISP'] = pd.to_numeric(df['HISP'], errors='coerce')\n",
        "\n",
        "# Drop NaN values for the plot\n",
        "df_filtered = df.dropna(subset=['CHECK_ITEM_L', 'HISP'])\n",
        "\n",
        "# Create a count plot\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.countplot(data=df_filtered, x='HISP', hue='CHECK_ITEM_L', palette='viridis')\n",
        "\n",
        "# Add titles and labels\n",
        "plt.title('Count of CHECK_ITEM_L by HISP', fontsize=16)\n",
        "plt.xlabel('HISP', fontsize=14)\n",
        "plt.ylabel('Count', fontsize=14)\n",
        "plt.xticks(ticks=range(len(race_mapping)), labels=race_mapping.keys(), rotation=45)\n",
        "\n",
        "# Add the legend explicitly with unique labels\n",
        "unique_labels = df_filtered['CHECK_ITEM_L'].dropna().unique()\n",
        "label_names = {1: 'Yes', 2: '2', 9: 'Out of universe'}\n",
        "plt.legend(title='CHECK_ITEM_L', labels=[label_names.get(label, str(label)) for label in unique_labels])\n",
        "\n",
        "plt.grid(axis='y')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "    \n",
        "![png](output_8_0.png)\n",
        "    \n",
        "\n",
        "\n",
        "This plot, generated from the 2018 Police-Public Contact Survey, displays the count of interactions where respondents answered “Yes” to a specific question (CHECK_ITEM_L), categorized by race (HISP). The survey investigates civilian experiences with law enforcement. The highest count is observed among White individuals, which is consistent with their larger representation in the dataset. In contrast, racial groups such as Asians and others have significantly fewer “Yes” responses. This chart highlights racial differences in certain law enforcement-related interactions, suggesting possible disparities in how different groups experience or report these encounters.\n",
        "\n",
        "## Race arrests by SEX with SCRMCTRL as Count Variable\n",
        "\n",
        "\n",
        "```python\n",
        "df = pd.read_csv('data.csv', low_memory=False)\n",
        "\n",
        "# Mapping CHECK_ITEM_L\n",
        "CHECK_ITEM_L_mapping = {\n",
        "    '(1) Yes': 1,\n",
        "    '(2) 2': 2,\n",
        "    '(9) Out of universe': 9\n",
        "}\n",
        "\n",
        "df['CHECK_ITEM_L'] = df['CHECK_ITEM_L'].astype(str).map(CHECK_ITEM_L_mapping)\n",
        "df['CHECK_ITEM_L'] = pd.to_numeric(df['CHECK_ITEM_L'], errors='coerce')\n",
        "\n",
        "# Mapping HISP\n",
        "race_mapping = {\n",
        "    '(1) White Only': 1,\n",
        "    '(2) Black Only': 2,\n",
        "    '(3) Hispanic': 3,\n",
        "    '(4) Asian Only': 4,\n",
        "    '(5) Other': 5\n",
        "}\n",
        "\n",
        "df['HISP'] = df['HISP'].astype(str).map(race_mapping)\n",
        "df['HISP'] = pd.to_numeric(df['HISP'], errors='coerce')\n",
        "\n",
        "# SEX Mapping\n",
        "sex_mapping = {\n",
        "    '(1) Male': 1,   # Male\n",
        "    '(2) Female': 2, # Female\n",
        "}\n",
        "\n",
        "df['SEX'] = df['SEX'].astype(str).map(sex_mapping)\n",
        "df['SEX'] = pd.to_numeric(df['SEX'], errors='coerce')\n",
        "\n",
        "# Drop NaN values for the plot\n",
        "df_filtered = df.dropna(subset=['CHECK_ITEM_L', 'HISP', 'SEX', 'SCRMCTRL'])\n",
        "\n",
        "# Create a count plot with SCRMCTRL as the count variable\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Count the occurrences of SCRMCTRL and use it to plot\n",
        "sns.countplot(data=df_filtered, x='HISP', hue='SEX', palette='viridis', dodge=True)\n",
        "\n",
        "# Add titles and labels\n",
        "plt.title('Count of Race arrests by SEX with SCRMCTRL as Count Variable', fontsize=16)\n",
        "plt.xlabel('HISP', fontsize=14)\n",
        "plt.ylabel('Count of SCRMCTRL', fontsize=14)\n",
        "plt.xticks(ticks=range(len(race_mapping)), labels=race_mapping.keys(), rotation=45)\n",
        "\n",
        "# Add the legend explicitly with unique labels for SEX\n",
        "plt.legend(title='SEX', labels=['Male', 'Female'])\n",
        "\n",
        "plt.grid(axis='y')\n",
        "\n",
        "# Save the plot as a PNG file\n",
        "plt.savefig('arrests_histogram_baruga.png', format='png', dpi=300, bbox_inches='tight')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "    \n",
        "![png](output_11_0.png)\n",
        "    \n",
        "\n",
        "\n",
        "This plot, based on the 2018 Police-Public Contact Survey dataset, shows the count of arrests (SCRMCTRL) across different racial categories (HISP), segmented by gender (SEX). The survey, conducted by the U.S. Bureau of Justice Statistics, examines public interactions with law enforcement, such as police stops and arrests. The higher arrest count for White males can be attributed to the fact that White individuals make up the largest racial group in the dataset. The data reveals notable racial and gender disparities in arrests, with arrest counts for females across all racial categories being lower than for males.\n"
      ],
      "id": "c48b3eb1"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\toluf\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}